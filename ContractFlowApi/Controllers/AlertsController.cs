using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using ContractsMvc.Data;
using ContractsMvc.Models;
using ContractsMvc.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace ContractsMvc.Controllers
{
    /// <summary>
    /// Exposes endpoints to trigger and query alerts generated by the
    /// AlertsHostedService. Alerts notify users of contracts and
    /// deliverables that are due or overdue.
    /// </summary>
    [ApiController]
    [Route("api/alerts")]
    public class AlertsController : ControllerBase
    {
        private readonly AlertsHostedService _alertsService;
        private readonly ContractsDbContext _db;

        public AlertsController(AlertsHostedService alertsService, ContractsDbContext db)
        {
            _alertsService = alertsService;
            _db = db;
        }

        /// <summary>
        /// Triggers the alert checking process manually. Returns the
        /// newly generated alerts in the response body.
        /// </summary>
        [HttpGet("test")]
        public async Task<IActionResult> Test(CancellationToken ct)
        {
            await _alertsService.CheckAndGenerateAlertsAsync(ct);
            // Return the last 50 alerts for convenience
            var alerts = await _db.Alerts.AsNoTracking()
                .OrderByDescending(a => a.CreatedAt)
                .Take(50)
                .ToListAsync(ct);
            return Ok(alerts);
        }

        /// <summary>
        /// Lists all alerts. Optionally can be filtered by contract or
        /// deliverable id via query parameters.
        /// </summary>
        [HttpGet]
        public async Task<IActionResult> List([FromQuery] Guid? contractId, [FromQuery] Guid? deliverableId, CancellationToken ct)
        {
            var query = _db.Alerts.AsNoTracking().AsQueryable();
            if (contractId.HasValue)
                query = query.Where(a => a.ContractId == contractId);
            if (deliverableId.HasValue)
                query = query.Where(a => a.DeliverableId == deliverableId);
            var data = await query.OrderByDescending(a => a.CreatedAt).ToListAsync(ct);
            return Ok(data);
        }
    }
}